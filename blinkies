/*
Blinky code for SAINTcon 2014
v .7
Matt Lorimer
  Some additions by Jason Udy (Saturn) and Maxwell and Zane Durkin (PeeWee)
This code uses the TLC5940 library created by <SOURCE URL foo>.  


Changelog:


Todo:
Change Func button to pin 1 or 2 and use interrupts rather than infinite loops
Additional patterns
POV stuff?

*/

#include "Tlc5940.h"

//Which button is the function button
const int funcButton = 2;     // the number of the pushbutton pin
//const int badgeLight = 6;

const int topRight = 9;
const int bottomRight = 6;
const int topLeft = 10;
const int bottomLeft = 11;

//Standard delay for animations
int pause = 50;

//These RGB LEDs are BRIGHT.  Set this between 0 and 1 to scale that brightness
float intensity = .1;


void setup()
{
  reInitTLC();
  
  //Function button
  pinMode(funcButton, INPUT);   
  
  //The top right badge LED isn't used by the TLC5940's so lets have it on all the time for the Acrylic
  pinMode(topLeft, OUTPUT);
  analogWrite(topLeft, 255);
  pinMode(bottomLeft, OUTPUT);
  analogWrite(bottomLeft, 255);
  pinMode(bottomRight, OUTPUT);
  analogWrite(bottomRight, 255);
  pinMode(topRight, OUTPUT);
  analogWrite(topRight, 255);
  

  // initialize the digital pin as an output.
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(6, OUTPUT);


}

void loop()
{
  //Each function is an infinite loop.  If you push the button, a return statement exits the infinite loop and runs the next animation

  //Clear the RGB LEDs and light the acrylic with all LEDs
  lightAcrylic();
  //Give them time to pull their finger off the button
  delay(400);
  reInitTLC();
  
  rainbow();
  //Give them time to pull their finger off the button
  delay(400);
  
  testZane1();
  //Give them time to pull their finger off the button
  delay(400);
  
  solid2();
  //Give them time to pull their finger off the button
  delay(400);
  
  cylonPattern();
  //Give them time to pull their finger off the button
  delay(400);

  cylonPatternrandom();
  //Give them time to pull their finger off the button
  delay(400);
 
  testPattern1();
  //Give them time to pull their finger off the button
  delay(400);
  
  outandInred();
  //Give them time to pull their finger off the button
  delay(400);

  outandInblue();
  //Give them time to pull their finger off the button
  delay(400);

  outandInredblue();
  //Give them time to pull their finger off the button
  delay(400);
  
  outandInredblue2();
  //Give them time to pull their finger off the button
  delay(400);
  
  testPattern2();
  //Give them time to pull their finger off the button
  delay(400);

  randomled();
  //Give them time to pull their finger off the button
  delay(400);
  
  solid();
  //Give them time to pull their finger off the button
  delay(400);
  
}

void reInitTLC()
{
  // init the TLC library/chip
  Tlc.init(0);

  //The TLC5940 needs a bit of time or it can do weird things for the first pin or two.
  delay(200);
}

void lightAcrylic()
{
  //Turn off all the LEDs
  clearBlinkies();
  

/*  pinMode(topRight, OUTPUT);
  pinMode(topLeft, OUTPUT);
  pinMode(bottomLeft, OUTPUT);
*/
//  analogWrite(topRight, 255);
//  analogWrite(topLeft, 255);
//  analogWrite(bottomLeft, 255);
//  analogWrite(bottomRight, 255);

digitalWrite(11, 128);
digitalWrite(10, 128);
digitalWrite(9, 128);
digitalWrite(6, 128);

  //Infinite loop runs until return is called
  while(true)
  {
    //Check for button press
    if (digitalRead(funcButton) == HIGH)
    {
      //Clear any programming currently set for LEDs
      Tlc.clear();

      //Now go back to loop() function
      return;
    }
  }
  
  // Could probably skip this delay to make the program more responsive....
  delay(150);
}

//Turn off all LEDs
void clearBlinkies()
{
  //Clear all the LEDs
  Tlc.clear();

  //Tell the TLC5940 to activate newly stored valus
  Tlc.update();  
}


//Light up all LEDs to a random color and change after a delay time
void solid()
{
  //list of colors
  unsigned long colors[] = {0xFFFFFF, 0xFF0000, 0xFF6600, 0xFFFF66, 0xFFFF00, 0x00FF00, 0x00CCCC, 0x0099FF, 0x0000FF, 0x9900CC, 0xFF00FF};
  unsigned long color;
  // array to hold pointer to current pin
  int ledPins[3];

  //Infinite loop runs until return is called
  while(true)
  {

    for(int i = 0; i < 30; i += 3)
    {
      //We need to skip pin 16, there is nothing there
      if(i == 15)
      {
        i++;
      }
      
      //choose color from the list randomly      
      color = colors[random(11)];
      
      //Specify the pins for the current LED - There is likely a better way to do this
      ledPins[0] = i;
      ledPins[1] = i+1;
      ledPins[2] = i+2;

      //Light up each of the LEDs accordingly      
      colorLED(ledPins, color);
      
    }
  
    //Tell drivers to output newly stored values
    Tlc.update();  
    
    //Time delay to show color LED
    delay(400);
   
    //Uncomment the next three lines if you want to blink the LEDs between colors
    //Tlc.clear();
    //Tlc.update();
    //delay(50);
    
    //Check for button press
    if (digitalRead(funcButton) == HIGH)
    {
      //Clear any programming currently set for LEDs
      Tlc.clear();

      //Now go back to loop() function
      return;
    }
  } 
  // Could probably skip this delay to make the program more responsive....
  delay(150);
} 

//Scan LEDs in order with pre-defined color pattern - Rainbow by Maxwell
void rainbow()
{
  //Color pattern
  unsigned long colors[] = {0xFF0000, 0xFF6600, 0xFFFF66, 0xFFFF00, 0x00FF00, 0x00CCCC, 0x0099FF, 0x0000FF, 0x9900CC, 0xFF00FF};

  //array containing pins for the LED to be lit
    
  int ledPins6[3];
  int ledPins5[3];
  int ledPins4[3];
  int ledPins3[3];
  int ledPins2[3];
  int ledPins1[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Initialize ledPins, so we start at the first LED
    for(int i = 0; i < 3; i++)
    {
    ledPins6[i] = i+16;
    ledPins5[i] = i+12;  
    ledPins4[i] = i+9;  
    ledPins3[i] = i+6;
    ledPins2[i] = i+3;
    ledPins1[i] = i;
    }

    //Loop through all the LEDs
   // for(int patternLoop = 0; patternLoop < 10; patternLoop++)
   
   //Infinite Loop
   while(true)
    {
      //Clear any stored values
      Tlc.clear();

      //Update the value for this pin
      colorLED(ledPins6, 0xFF0000);  //Red
      colorLED(ledPins5, 0xFF7F00);  //Orange
      colorLED(ledPins4, 0xFFFF00);  //Yellow
      colorLED(ledPins3, 0x00FF00);  //Green
      colorLED(ledPins2, 0x0000FF);  //Blue
      colorLED(ledPins1, 0xFF00FF);  //Violet

      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(70);

      //Increment pins
      for(int i = 0; i < 3; i++)
      {
      ledPins6[i] += 3;
      ledPins5[i] += 3;  
      ledPins4[i] += 3;  
      ledPins3[i] += 3;
      ledPins2[i] += 3;
      ledPins1[i] += 3;
      
      //Skip pin 16 for all 3 chasing LEDs
    if(ledPins6[i] == 16)
      {
      ledPins6[0] += 1;
      ledPins6[1] += 1;
      ledPins6[2] += 1;
      }
    if(ledPins5[i] == 16)
      {
      ledPins5[0] += 1;
      ledPins5[1] += 1;
      ledPins5[2] += 1;
      }
    if(ledPins4[i] == 16)
      {
      ledPins4[0] += 1;
      ledPins4[1] += 1;
      ledPins4[2] += 1;
      }
    if(ledPins3[i] == 16)
      {
      ledPins3[0] += 1;
      ledPins3[1] += 1;
      ledPins3[2] += 1;
      }
    if(ledPins2[i] == 16)
      {
      ledPins2[0] += 1;
      ledPins2[1] += 1;
      ledPins2[2] += 1;
      }
    if(ledPins1[i] == 16)
      {
      ledPins1[0] += 1;
      ledPins1[1] += 1;
      ledPins1[2] += 1;
      } 
      
      //Reset Pins Back to begining
      if(ledPins6[i] == 33)
      {
      ledPins6[0] = 0;
      ledPins6[1] = 1;
      ledPins6[2] = 2;
      }
      if(ledPins5[i] == 33)
      {
      ledPins5[0] = 0;
      ledPins5[1] = 1;
      ledPins5[2] = 2;
      }
      if(ledPins4[i] == 33)
      {
      ledPins4[0] = 0;
      ledPins4[1] = 1;
      ledPins4[2] = 2;
      }
      if(ledPins3[i] == 33)
      {
      ledPins3[0] = 0;
      ledPins3[1] = 1;
      ledPins3[2] = 2;
      }
    if(ledPins2[i] == 33)
      {
      ledPins2[0] = 0;
      ledPins2[1] = 1;
      ledPins2[2] = 2;
      }
    if(ledPins1[i] == 33)
      {
      ledPins1[0] = 0;
      ledPins1[1] = 1;
      ledPins1[2] = 2;
      } 
    
      }

      //Check for button press
      if (digitalRead(funcButton) == HIGH)
      {
        //Clear any programming currently set for LEDs
        Tlc.clear();
  
        //Now go back to loop() function
        return;
      }
    }
  }
}

//Cop Lights
void solid2()
{
  //list of colors
  unsigned long colors[] = {0xFFFFFF, 0xFF0000, 0x0000FF};
  unsigned long color;
  // array to hold pointer to current pin
  int ledPins[3];

  //Infinite loop runs until return is called
  while(true)
  {
      //choose color from the list randomly      
      color = colors[random(3)];

    for(int i = 0; i < 15; i += 3)
    {
      //We need to skip pin 16, there is nothing there
      if(i == 15)
      {
        i++;
      }
            
      //Specify the pins for the current LED - There is likely a better way to do this
      ledPins[0] = i;
      ledPins[1] = i+1;
      ledPins[2] = i+2;

      //Light up each of the LEDs accordingly      
      colorLED(ledPins, color);
      
    }

      //choose color from the list randomly      
      color = colors[random(3)];

    for(int i = 16; i < 30; i += 3)
    {
      //We need to skip pin 16, there is nothing there
      if(i == 15)
      {
        i++;
      }
            
      //Specify the pins for the current LED - There is likely a better way to do this
      ledPins[0] = i;
      ledPins[1] = i+1;
      ledPins[2] = i+2;

      //Light up each of the LEDs accordingly      
      colorLED(ledPins, color);
      
    }

  
    //Tell drivers to output newly stored values
    Tlc.update();  
    
    //Time delay to show color LED
    delay(125);
   
    //Uncomment the next three lines if you want to blink the LEDs between colors
    //Tlc.clear();
    //Tlc.update();
    //delay(50);
    
    //Check for button press
    if (digitalRead(funcButton) == HIGH)
    {
      //Clear any programming currently set for LEDs
      Tlc.clear();

      //Now go back to loop() function
      return;
    }
  } 
  // Could probably skip this delay to make the program more responsive....
  delay(150);
} 


//Scan LEDs like a Cylon or Knightrider but random colors
void cylonPatternrandom()
{
    //list of colors
  unsigned long colors[] = {0xFFFFFF, 0xFF0000, 0xFF6600, 0xFFFF66, 0xFFFF00, 0x00FF00, 0x00CCCC, 0x0099FF, 0x0000FF, 0x9900CC, 0xFF00FF};
  unsigned long color;

  //arry containing pins for the LED to be lit
  int ledPins[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Initialize ledPins, so we start at the first LED
    ledPins[0] = 0;
    ledPins[1] = 1;
    ledPins[2] = 2;

      //choose color from the list randomly      
      color = colors[random(11)];

    //Loop forward through all the LEDs
    for(int patternLoop = 0; patternLoop < 10; patternLoop++)
    {
      //Clear any stored values
      Tlc.clear();
      
      //Update the value for this pin
      colorLED(ledPins, color);

      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(pause);

      //Increment pins
      ledPins[0] += 3;
      ledPins[1] += 3;
      ledPins[2] += 3; 
      
      //Nothing is plugged into pin 16, so we need to skip it
      if(patternLoop == 4)
      {
        ledPins[0] += 1;
        ledPins[1] += 1;
        ledPins[2] += 1;
      }

      //Check for button press
      if (digitalRead(funcButton) == HIGH)
      {
        //Clear any programming currently set for LEDs
        Tlc.clear();
  
        //Now go back to loop() function
        return;
      }
    }
        //Loop back through all the LEDs
    for(int patternLoop = 10; patternLoop >= 0; patternLoop--)
    {
      //Clear any stored values
      Tlc.clear();

      //Update the value for this pin
      colorLED(ledPins, color);  //red

      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(pause);

      //Increment pins
      ledPins[0] -= 3;
      ledPins[1] -= 3;
      ledPins[2] -= 3; 
      
      //Nothing is plugged into pin 16, so we need to skip it
      if(patternLoop == 5)
      {
        ledPins[0] -= 1;
        ledPins[1] -= 1;
        ledPins[2] -= 1;
      }

      //Check for button press
      if (digitalRead(funcButton) == HIGH)
      {
        //Clear any programming currently set for LEDs
        Tlc.clear();
  
        //Now go back to loop() function
        return;
      }
    }
  }
}


//Scan from outside to middle and back to outside with red color
void outandInred()
{
  unsigned long colors = 0xFF0000; //red

  //2 LED pin values for each end
  int ledPins1[3];
  int ledPins2[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Specify the pins for the current LED - There is likely a better way to do this
    ledPins1[0] = 0;
    ledPins1[1] = 1;
    ledPins1[2] = 2;
    ledPins2[0] = 28;
    ledPins2[1] = 29;
    ledPins2[2] = 30;

    Tlc.update();

    for(int pinLoop = 0; pinLoop < 4; pinLoop++)
    {  
      for(int colorLoop = 0 ; colorLoop < 6 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
        
        //Color the 2 LEDs
        colorLED(ledPins1, colors);
        colorLED(ledPins2, colors);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(25);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
    
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins1 to the next LED
      ledPins1[0] += 3;
      ledPins1[1] += 3;
      ledPins1[2] += 3;
      
      //Move ledPins2 to the previous LED
      ledPins2[0] -= 3;
      ledPins2[1] -= 3;
      ledPins2[2] -= 3;
    }
    for(int pinLoop = 4; pinLoop > 0; pinLoop--)
    {  
      for(int colorLoop = 0 ; colorLoop < 5 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
        
        //Color the 2 LEDs
        colorLED(ledPins1, colors);
        colorLED(ledPins2, colors);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(30);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
    
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins1 to the next LED
      ledPins1[0] -= 3;
      ledPins1[1] -= 3;
      ledPins1[2] -= 3;
      
      //Move ledPins2 to the previous LED
      ledPins2[0] += 3;
      ledPins2[1] += 3;
      ledPins2[2] += 3;
    }
  }
}

//Scan from outside to middle and back to outside with blue color
void outandInblue()
{      //If you want to change the color change the hex code.
  unsigned long colors = 0x0000FF; //blue

  //2 LED pin values for each end
  int ledPins1[3];
  int ledPins2[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Specify the pins for the current LED - There is likely a better way to do this
    ledPins1[0] = 0;
    ledPins1[1] = 1;
    ledPins1[2] = 2;
    ledPins2[0] = 28;
    ledPins2[1] = 29;
    ledPins2[2] = 30;

    Tlc.update();

    for(int pinLoop = 0; pinLoop < 4; pinLoop++)
    {  
      for(int colorLoop = 0 ; colorLoop < 6 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
        
        //Color the 2 LEDs
        colorLED(ledPins1, colors);
        colorLED(ledPins2, colors);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(25);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
    
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins1 to the next LED
      ledPins1[0] += 3;
      ledPins1[1] += 3;
      ledPins1[2] += 3;
      
      //Move ledPins2 to the previous LED
      ledPins2[0] -= 3;
      ledPins2[1] -= 3;
      ledPins2[2] -= 3;
    }
    for(int pinLoop = 4; pinLoop > 0; pinLoop--)
    {  
      for(int colorLoop = 0 ; colorLoop < 5 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
        
        //Color the 2 LEDs
        colorLED(ledPins1, colors);
        colorLED(ledPins2, colors);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(30);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
    
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins1 to the next LED
      ledPins1[0] -= 3;
      ledPins1[1] -= 3;
      ledPins1[2] -= 3;
      
      //Move ledPins2 to the previous LED
      ledPins2[0] += 3;
      ledPins2[1] += 3;
      ledPins2[2] += 3;
    }
  }
}


//Scan from outside to middle and back to outside with red and blue colors
void outandInredblue()
{
  unsigned long red = 0xFF0000; //red
  unsigned long blue = 0x0000FF; //blue

  //2 LED pin values for each end
  int ledPins1[3];
  int ledPins2[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Specify the pins for the current LED - There is likely a better way to do this
    ledPins1[0] = 0;
    ledPins1[1] = 1;
    ledPins1[2] = 2;
    ledPins2[0] = 28;
    ledPins2[1] = 29;
    ledPins2[2] = 30;

    Tlc.update();

    for(int pinLoop = 0; pinLoop < 4; pinLoop++)
    {  
      for(int colorLoop = 0 ; colorLoop < 6 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
              
        //Color the 2 LEDs
        colorLED(ledPins1, red);
        colorLED(ledPins2, blue);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(25);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
  
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins1 to the next LED
      ledPins1[0] += 3;
      ledPins1[1] += 3;
      ledPins1[2] += 3;
      
      //Move ledPins2 to the previous LED
      ledPins2[0] -= 3;
      ledPins2[1] -= 3;
      ledPins2[2] -= 3;
    }
    for(int pinLoop = 4; pinLoop > 0; pinLoop--)
    {  
      for(int colorLoop = 0 ; colorLoop < 5 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
        
        //Color the 2 LEDs
        colorLED(ledPins1, red);
        colorLED(ledPins2, blue);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(30);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
    
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins1 to the next LED
      ledPins1[0] -= 3;
      ledPins1[1] -= 3;
      ledPins1[2] -= 3;
      
      //Move ledPins2 to the previous LED
      ledPins2[0] += 3;
      ledPins2[1] += 3;
      ledPins2[2] += 3;
    }
  }
}

//Bee Doo Bee Doo Bee Doo
void outandInredblue2()
{
  unsigned long red = 0xFF0000; //red
  unsigned long blue = 0x0000FF; //blue

  //4 LEDs
  int ledPins1[3];
  int ledPins2[3];
  int ledPins3[3];
  int ledPins4[3];  
  //Infinite loop runs until return is called
  while(true)
  {
    //Specify the pins for the current LED - There is likely a better way to do this
    //I know I jump around a bit here but that is the way I did it.
    ledPins1[0] = 0;
    ledPins1[1] = 1;
    ledPins1[2] = 2;
    ledPins2[0] = 16;
    ledPins2[1] = 17;
    ledPins2[2] = 18;
    ledPins3[0] = 12;
    ledPins3[1] = 13;
    ledPins3[2] = 14;
    ledPins4[0] = 28;
    ledPins4[1] = 29;
    ledPins4[2] = 30;
    Tlc.update();

    for(int pinLoop = 0; pinLoop < 4; pinLoop++)
    {  
      for(int colorLoop = 0 ; colorLoop < 6 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
              
        //Color the 2 LEDs
        colorLED(ledPins1, blue);
        colorLED(ledPins2, red);
        colorLED(ledPins3, blue);
        colorLED(ledPins4, red);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(25);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
  
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins back and forth
      ledPins1[0] += 3;
      ledPins1[1] += 3;
      ledPins1[2] += 3;      
      ledPins2[0] += 3;
      ledPins2[1] += 3;
      ledPins2[2] += 3;
      ledPins3[0] -= 3;
      ledPins3[1] -= 3;
      ledPins3[2] -= 3;
      ledPins4[0] -= 3;
      ledPins4[1] -= 3;
      ledPins4[2] -= 3;
      
    }
    for(int pinLoop = 4; pinLoop > 0; pinLoop--)
    {  
      for(int colorLoop = 0 ; colorLoop < 5 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
        
        //Color the 2 LEDs
        colorLED(ledPins1, blue);
        colorLED(ledPins2, red);
        colorLED(ledPins3, blue);
        colorLED(ledPins4, red);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(30);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
    
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins back and forth
      ledPins1[0] -= 3;
      ledPins1[1] -= 3;
      ledPins1[2] -= 3;
      ledPins2[0] -= 3;
      ledPins2[1] -= 3;
      ledPins2[2] -= 3;
      ledPins3[0] += 3;
      ledPins3[1] += 3;
      ledPins3[2] += 3;
      ledPins4[0] += 3;
      ledPins4[1] += 3;
      ledPins4[2] += 3;      
    }
  }
}


void testPattern1()
{
  unsigned long colors[] = {0xFF0000, 0x00FF00, 0x0000FF, 0xFF7F00, 0xFFFF00, 0xB266FF};

  //2 LED pin values for each end
  int ledPins1[3];
  int ledPins2[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Specify the pins for the current LED - There is likely a better way to do this
    ledPins1[0] = 0;
    ledPins1[1] = 1;
    ledPins1[2] = 2;
    ledPins2[0] = 28;
    ledPins2[1] = 29;
    ledPins2[2] = 30;

    Tlc.update();

    for(int pinLoop = 0; pinLoop < 5; pinLoop++)
    {  
      for(int colorLoop = 0 ; colorLoop < 6 ; colorLoop++)
      {
        //Clear any programming
        Tlc.clear();
        
        //Color the 2 LEDs
        colorLED(ledPins1, colors[colorLoop]);
        colorLED(ledPins2, colors[colorLoop]);
        
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(pause);

        //Check for button press
        if (digitalRead(funcButton) == HIGH)
        {
          //Clear any programming currently set for LEDs
          Tlc.clear();
    
          //Now go back to loop() function
          return;
        }
      }
  
      //Move ledPins1 to the next LED
      ledPins1[0] += 3;
      ledPins1[1] += 3;
      ledPins1[2] += 3;
      
      //Move ledPins2 to the previous LED
      ledPins2[0] -= 3;
      ledPins2[1] -= 3;
      ledPins2[2] -= 3;
    }
  }
}

//Scan LEDs in order with pre-defined color pattern
void testPattern2()
{
  //Color pattern
  unsigned long colors[] = {0xFF0000, 0xFF6600, 0xFFFF66, 0xFFFF00, 0x00FF00, 0x00CCCC, 0x0099FF, 0x0000FF, 0x9900CC, 0xFF00FF};

  //arry containing pins for the LED to be lit
  int ledPins[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Initialize ledPins, so we start at the first LED
    ledPins[0] = 0;
    ledPins[1] = 1;
    ledPins[2] = 2;

    //Loop through all the LEDs
    for(int patternLoop = 0; patternLoop < 10; patternLoop++)
    {
      //Clear any stored values
      Tlc.clear();

      //Update the value for this pin
      colorLED(ledPins, colors[patternLoop]);  //red

      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(pause);

      //Increment pins
      ledPins[0] += 3;
      ledPins[1] += 3;
      ledPins[2] += 3;
      
      //Nothing is plugged into pin 16, so we need to skip it
      if(patternLoop == 4)
      {
        ledPins[0] += 1;
        ledPins[1] += 1;
        ledPins[2] += 1;
      }

      //Check for button press
      if (digitalRead(funcButton) == HIGH)
      {
        //Clear any programming currently set for LEDs
        Tlc.clear();
  
        //Now go back to loop() function
        return;
      }
    }
  }
}

//This function blinks random LEDs with random colors - By Maxwell
void randomled()
{
  //list of colors
  unsigned long colors[] = {0xFFFFFF, 0xFF0000, 0xFF6600, 0xFFFF66, 0xFFFF00, 0x00FF00, 0x00CCCC, 0x0099FF, 0x0000FF, 0x9900CC, 0xFF00FF};

  // array to hold pointer to current pin
  int ledPins[3];
  int i = 0;
while(true)
  {
 
 //for(int x = 0; x < 32; x += 3)
 while(true)
  {
    //Clear any programming currently set for LEDs
      Tlc.clear();
    
    //choose color from the list randomly
  unsigned long color = colors[random(11)];
  //Light up each of the LEDs accordingly    
  
    
    i = random(28);
    //We need to skip pin 16, there is nothing there
    if(i == 15)
    {
      i++;
    }

    //Specify the pins for the current LED - There is likely a better way to do this
    ledPins[0] = i;
    ledPins[1] = i+1;
    ledPins[2] = i+2;
    
    colorLED(ledPins, color);

  //Tell drivers to output newly stored values
  Tlc.update();  
  //Delay so users can see the pretty colors
      delay(70);


  
    //Check for button press
    if (digitalRead(funcButton) == HIGH)
    {
      //Clear any programming currently set for LEDs
      Tlc.clear();

      //Now go back to loop() function
      return;
    }}
 }
  
  // Could probably skip this delay to make the program more responsive....
  delay(150);
} 


//Scan LEDs like a Cylon or Knightrider
void cylonPattern()
{
  //Color pattern
  unsigned long color = 0xFF0000;

  //arry containing pins for the LED to be lit
  int ledPins1[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
    //Initialize ledPins, so we start at the first LED
    ledPins1[0] = 0;
    ledPins1[1] = 1;
    ledPins1[2] = 2;

    //Loop forward through all the LEDs
    for(int patternLoop = 0; patternLoop < 10; patternLoop++)
    {
      //Clear any stored values
      Tlc.clear();

      //Update the value for this pin
      colorLED(ledPins1, color);  //red
      
      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(pause);

      //Increment pins
      ledPins1[0] += 3;
      ledPins1[1] += 3;
      ledPins1[2] += 3; 
      
      //Nothing is plugged into pin 16, so we need to skip it
      if(patternLoop == 4)
      {
        ledPins1[0] += 1;
        ledPins1[1] += 1;
        ledPins1[2] += 1;
      }

      //Check for button press
      if (digitalRead(funcButton) == HIGH)
      {
        //Clear any programming currently set for LEDs
        Tlc.clear();
  
        //Now go back to loop() function
        return;
      }
    }
        //Loop back through all the LEDs
    for(int patternLoop = 10; patternLoop >= 0; patternLoop--)
    {
      //Clear any stored values
      Tlc.clear();

      //Update the value for this pin
      colorLED(ledPins1, color);  //red

      //Tell drivers to output newly stored values
      Tlc.update();  
      
      //Delay so users can see the pretty colors
      delay(pause);

      //Increment pins
      ledPins1[0] -= 3;
      ledPins1[1] -= 3;
      ledPins1[2] -= 3; 
      
      //Nothing is plugged into pin 16, so we need to skip it
      if(patternLoop == 5)
      {
        ledPins1[0] -= 1;
        ledPins1[1] -= 1;
        ledPins1[2] -= 1;
      }

      //Check for button press
      if (digitalRead(funcButton) == HIGH)
      {
        //Clear any programming currently set for LEDs
        Tlc.clear();
  
        //Now go back to loop() function
        return;
      }
    }
  }
}


// Function to color the LED the given hex color code
void colorLED(int ledPins[], unsigned long color)
{
  /* 
    Code and explanation adapted from: http://ardx.org/src/code/CIRC12-code-MB-SPAR.txt
    
    Sets the color of the RGB LED to the color specified by the
    HTML-style hex triplet color value supplied to the function.
    
    The color value supplied should be an unsigned long number
    of the form:
    
      0xRRGGBB
      
      e.g. 0xFF7F00 is orange
      
    where:
   
       0x specifies the value is a hexadecimal number
       RR is a byte specifying the red intensity
       GG is a byte specifying the green intensity
       BB is a byte specifying the blue intensity


    How it works (you don't need to understand this to use the function):

    The supplied value of the form 0xRRGGBB is an unsigned long which can
    store four bytes. If we view the number in bit form the bits of the
    unsigned long look like this:
    
      iiiiiiiirrrrrrrrggggggggbbbbbbbb
      
    where:
    
      i are bits that are ignored (because we only need three bytes for the value)
      r are bits specifying the red intensity
      g are bits specifying the green intensity
      b are bits specifying the blue intensity
      
    We use bit shifting and masking to extract the individual values.
    
    Bit shifting moves the bits in a number along in one direction to produce
    a new number. For example ">> n" means shift the bits n positions to the
    right.
    
      e.g. iiiiiiiirrrrrrrrggggggggbbbbbbbb >> 8 gives:
      
           00000000iiiiiiiirrrrrrrrgggggggg
           
    
    The number 0xFF represents the bit mask:
    
      00000000000000000000000011111111
      
    The "&" character means the two values are "and"ed together--for each bit
    in the two numbers being "and"ed together the resulting bit is only set in
    the result if the same bits are set in both the input numbers.
  
    So, continuing our example:
    
      00000000iiiiiiiirrrrrrrrgggggggg && 0xFF gives:
      
      00000000iiiiiiiirrrrrrrrgggggggg &&
      00000000000000000000000011111111 =
      000000000000000000000000gggggggg
      
    And we now have extracted only the green bits from our hex triplet.
    
    More details on bit math can be found here:
    
       <http://www.arduino.cc/playground/Code/BitMath>
      
   */

  // Extract the intensity values from the hex triplet
  int redIntensity = (color >> 16) & 0xFF;
  int greenIntensity = (color >> 8) & 0xFF;
  int blueIntensity = color & 0xFF;

  //Do some software based color calibrations
  redIntensity = redIntensity * 4 * intensity;
  greenIntensity = greenIntensity * 3 * intensity;
  blueIntensity = blueIntensity * 4 * intensity;



  //Make sure the value isn't too high
  if (redIntensity > 4095) {
    redIntensity = 4095;
  }
  if (greenIntensity > 4095) {
    greenIntensity = 4095;
  }
  if (blueIntensity > 4095) {
    blueIntensity = 4095;
  }

  //Now turn on each color with the intensity adjustment
  Tlc.set(ledPins[0], redIntensity);
  Tlc.set(ledPins[1], greenIntensity);
  Tlc.set(ledPins[2], blueIntensity);
}
void testZane1 ()
{
    //list of colors
  unsigned long colors[] = {0xFFFFFF, 0xFF0000, 0xFF6600, 0xFFFF66, 0xFFFF00, 0x00FF00, 0x00CCCC, 0x0099FF, 0x0000FF, 0x9900CC, 0xFF00FF, 0x000000};
  unsigned long color;

  //arry containing pins for the LED to be lit
  int ledPins0[3];
  int ledPins1[3];
  int ledPins2[3];
  int ledPins3[3];
  int ledPins4[3];
  int ledPins5[3];
  int ledPins6[3];
  int ledPins7[3];
  int ledPins8[3];
  int ledPins9[3];
  
  //Infinite loop runs until return is called
  while(true)
  {
        ledPins0[0] = 0;
        ledPins0[1] = 1;
        ledPins0[2] = 2;
	ledPins1[0] = 3;
	ledPins1[1] = 4;
	ledPins1[2] = 5;
	ledPins2[0] = 6;
	ledPins2[1] = 7;
	ledPins2[2] = 8;
	ledPins3[0] = 9;
	ledPins3[1] = 10;
	ledPins3[2] = 11;
	ledPins4[0] = 12;
	ledPins4[1] = 13;
	ledPins4[2] = 14;
	ledPins5[0] = 16;
	ledPins5[1] = 17;
	ledPins5[2] = 18;
	ledPins6[0] = 19;
	ledPins6[1] = 20;
	ledPins6[2] = 21;
	ledPins7[0] = 22;
	ledPins7[1] = 23;
	ledPins7[2] = 24;
	ledPins8[0] = 25;
	ledPins8[1] = 26;
	ledPins8[2] = 27;
	ledPins9[0] = 28;
	ledPins9[1] = 29;
	ledPins9[2] = 30;
		
	for (int patternLoop = 1; patternLoop <3; patternLoop ++){
		//choose color from the list randomly      
		color = colors[random(11)];
		if(patternLoop % 2 == 0) {
			color = colors[12];
                        patternLoop = 0;
		}
		//coloring odd numbers.  Yes, I am positive their is a better way to do this.
		
		//Update the value for this LED
		colorLED(ledPins0, color);
		//Tell drivers to output newly stored values
		Tlc.update();  
		//Delay so users can see the pretty colors
		delay(pause);
                delay(pause);
		
		//Update the value for this LED
		colorLED(ledPins2, color);
		//Tell drivers to output newly stored values
		Tlc.update();   
		//Delay so users can see the pretty colors
		delay(pause);
                delay(pause);
		
		//Update the value for this LED
		colorLED(ledPins4, color);
		Tlc.update();
		delay(pause);
                delay(pause);

		//Update the value for this LED
		colorLED(ledPins6, color);
		Tlc.update();
		delay(pause);
		delay(pause);
		
		//Update the value for this LED
		colorLED(ledPins8, color);
		Tlc.update();
		delay(pause);
		delay(pause);

                //Check for button press
		if (digitalRead(funcButton) == HIGH){
                    //Clear any programming currently set for LEDs
                    Tlc.clear();
  
                    //Now go back to loop() function
                    return;
		}
		
		//coloring even on way back.
		
		//Update the value for this LED
		colorLED(ledPins9, color);
		Tlc.update();
		delay(pause);
		delay(pause);
		
		//Update the value for this LED
		colorLED(ledPins7, color);
		Tlc.update();
		delay(pause);
		delay(pause);
		
		//Update the value for this LED
		colorLED(ledPins5, color);
		Tlc.update();
		delay(pause);
		delay(pause);
		
		
		//Update the value for this LED
		colorLED(ledPins3, color);
		Tlc.update();
		delay(pause);
		delay(pause);
		
		//Update the value for this LED
		colorLED(ledPins1, color);
		Tlc.update();
		delay(pause);
		delay(pause);
		

		
		//Check for button press
		if (digitalRead(funcButton) == HIGH){
                    //Clear any programming currently set for LEDs
                    Tlc.clear();
  
                    //Now go back to loop() function
                    return;
		}
	}
  }
}
